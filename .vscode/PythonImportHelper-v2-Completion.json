[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "importPath": "TaskManager",
        "description": "TaskManager",
        "isExtraImport": true,
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "importPath": "TaskManager",
        "description": "TaskManager",
        "isExtraImport": true,
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "importPath": "TaskManager",
        "description": "TaskManager",
        "isExtraImport": true,
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "Task",
        "description": "Task",
        "isExtraImport": true,
        "detail": "Task",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "Task",
        "description": "Task",
        "isExtraImport": true,
        "detail": "Task",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "Task",
        "description": "Task",
        "isExtraImport": true,
        "detail": "Task",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "handle_add_task",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_delete_task",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_edit_task",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_view_tasks",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_search_tasks",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_mark_completed",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "display_menu",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def display_menu() -> None:\n    \"\"\"Выводит меню программы.\"\"\"\n    menu_options = [\n        \"1. Добавить задачу\",\n        \"2. Удалить задачу\",\n        \"3. Редактировать задачу\",\n        \"4. Просмотреть задачи\",\n        \"5. Найти задачу\",\n        \"6. Отметить задачу как выполненную\",\n        \"7. Выход\",",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "get_task_updates",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def get_task_updates() -> dict:\n    \"\"\"Запрашивает у пользователя обновления для задачи.\"\"\"\n    updates = {}\n    fields = {\n        \"title\": \"Новый заголовок\",\n        \"description\": \"Новое описание\",\n        \"category\": \"Новая категория\",\n        \"due_date\": \"Новая дата выполнения (YYYY-MM-DD)\",\n        \"priority\": \"Новый приоритет (низкий/средний/высокий)\",\n    }",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_add_task",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_add_task(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает добавление новой задачи.\"\"\"\n    title = input(\"Введите заголовок: \")\n    description = input(\"Введите описание: \")\n    category = input(\"Введите категорию: \")\n    due_date = input(\"Введите дату выполнения (YYYY-MM-DD): \")\n    priority = input(\"Введите приоритет (низкий/средний/высокий): \")\n    manager.add_task(title, description, category, due_date, priority)\n    print(\"Задача добавлена.\")\ndef handle_delete_task(manager: TaskManager) -> None:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_delete_task",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_delete_task(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает удаление задачи.\"\"\"\n    try:\n        task_id = int(input(\"Введите ID задачи для удаления: \"))\n        manager.delete_task(task_id)\n        print(\"Задача удалена.\")\n    except ValueError:\n        print(\"Неверный формат ID.\")\ndef handle_edit_task(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает редактирование задачи.\"\"\"",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_edit_task",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_edit_task(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает редактирование задачи.\"\"\"\n    try:\n        task_id = int(input(\"Введите ID задачи для редактирования: \"))\n        updates = get_task_updates()\n        manager.edit_task(task_id, **updates)\n        print(\"Задача отредактирована.\")\n    except ValueError:\n        print(\"Неверный формат ID.\")\ndef handle_view_tasks(manager: TaskManager) -> None:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_view_tasks",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_view_tasks(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает просмотр задач.\"\"\"\n    category = input(\"Введите категорию (нажмите Enter для всех категорий): \")\n    tasks = manager.view_tasks(category if category else None)\n    if tasks:\n        for task in tasks:\n            print(f\"\\n {task}\")\n    else:\n        print(\"Задач не найдено.\")\ndef handle_search_tasks(manager: TaskManager) -> None:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_search_tasks",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_search_tasks(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает поиск задач.\"\"\"\n    keyword = input(\"Введите ключевое слово для поиска: \")\n    category = input(\"Введите категорию (нажмите Enter для всех категорий): \")\n    status = input(\"Введите статус (выполнено/не выполнено/нажмите Enter для всех): \")\n    tasks = manager.search_tasks(keyword, category if category else None, status if status else None)\n    if tasks:\n        for task in tasks:\n            print(task)\n    else:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "handle_mark_completed",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def handle_mark_completed(manager: TaskManager) -> None:\n    \"\"\"Обрабатывает отметку задачи как выполненной.\"\"\"\n    try:\n        task_id = int(input(\"Введите ID задачи для отметки как выполненной: \"))\n        task = manager.find_task_by_id(task_id)\n        if task:\n            manager.edit_task(task_id, status=\"выполнено\")\n            print(\"Задача отмечена как выполненная.\")\n        else:\n            print(\"Задача не найдена.\")",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "def main():\n    file_path = \"tasks.json\"  # Укажите путь к файлу с задачами\n    manager = TaskManager(file_path)\n    actions = {\n        \"1\": handle_add_task,\n        \"2\": handle_delete_task,\n        \"3\": handle_edit_task,\n        \"4\": handle_view_tasks,\n        \"5\": handle_search_tasks,\n        \"6\": handle_mark_completed,",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "Task",
        "description": "Task",
        "peekOfCode": "class Task:\n    def __init__(self, id: int, title: str, description: str, category: str, due_date: str, priority: str, status: str = \"Не выполнена\"):\n        self.id = id\n        self.title = title\n        self.description = description\n        self.category = category\n        self.due_date = self._parse_date(due_date)\n        self.priority = priority\n        self.status = status\n    def _parse_date(self, date_str: str) -> datetime:",
        "detail": "Task",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "kind": 6,
        "importPath": "TaskManager",
        "description": "TaskManager",
        "peekOfCode": "class TaskManager:\n    def __init__(self, file_path: str) -> None:\n        \"\"\"\n        Инициализирует TaskManager, создавая файл задач, если он не существует.\n        :param file_path: путь к файлу задач.\n        \"\"\"\n        self.file_path = file_path\n        self._ensure_file_exists()\n    def _ensure_file_exists(self) -> None:\n        \"\"\"",
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "mock_manager",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def mock_manager():\n    \"\"\"Создает мок для TaskManager.\"\"\"\n    manager = MagicMock(spec=TaskManager)\n    manager.view_tasks.return_value = []\n    manager.search_tasks.return_value = []\n    manager.find_task_by_id.return_value = None\n    return manager\ndef test_handle_add_task(mock_manager):\n    \"\"\"Тестирует добавление задачи.\"\"\"\n    inputs = [\"Задача 1\", \"Описание\", \"Работа\", \"2024-12-01\", \"высокий\"]",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_add_task",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_add_task(mock_manager):\n    \"\"\"Тестирует добавление задачи.\"\"\"\n    inputs = [\"Задача 1\", \"Описание\", \"Работа\", \"2024-12-01\", \"высокий\"]\n    with patch(\"builtins.input\", side_effect=inputs):\n        handle_add_task(mock_manager)\n    mock_manager.add_task.assert_called_once_with(\"Задача 1\", \"Описание\", \"Работа\", \"2024-12-01\", \"высокий\")\ndef test_handle_delete_task(mock_manager):\n    \"\"\"Тестирует удаление задачи.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"1\"]):\n        handle_delete_task(mock_manager)",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_delete_task",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_delete_task(mock_manager):\n    \"\"\"Тестирует удаление задачи.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"1\"]):\n        handle_delete_task(mock_manager)\n    mock_manager.delete_task.assert_called_once_with(1)\ndef test_handle_delete_task_invalid_id(mock_manager, capsys):\n    \"\"\"Тестирует удаление задачи с некорректным ID.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"abc\"]):\n        handle_delete_task(mock_manager)\n    captured = capsys.readouterr()",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_delete_task_invalid_id",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_delete_task_invalid_id(mock_manager, capsys):\n    \"\"\"Тестирует удаление задачи с некорректным ID.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"abc\"]):\n        handle_delete_task(mock_manager)\n    captured = capsys.readouterr()\n    assert \"Неверный формат ID.\" in captured.out\n    mock_manager.delete_task.assert_not_called()\ndef test_handle_edit_task(mock_manager):\n    \"\"\"Тестирует редактирование задачи.\"\"\"\n    inputs = [\"1\", \"y\", \"Новый заголовок\", \"y\", \"Новое описание\", \"n\", \"n\", \"n\"]",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_edit_task",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_edit_task(mock_manager):\n    \"\"\"Тестирует редактирование задачи.\"\"\"\n    inputs = [\"1\", \"y\", \"Новый заголовок\", \"y\", \"Новое описание\", \"n\", \"n\", \"n\"]\n    with patch(\"builtins.input\", side_effect=inputs):\n        handle_edit_task(mock_manager)\n    mock_manager.edit_task.assert_called_once_with(1, title=\"Новый заголовок\", description=\"Новое описание\")\ndef test_handle_edit_task_invalid_id(mock_manager, capsys):\n    \"\"\"Тестирует редактирование задачи с некорректным ID.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"abc\"]):\n        handle_edit_task(mock_manager)",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_edit_task_invalid_id",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_edit_task_invalid_id(mock_manager, capsys):\n    \"\"\"Тестирует редактирование задачи с некорректным ID.\"\"\"\n    with patch(\"builtins.input\", side_effect=[\"abc\"]):\n        handle_edit_task(mock_manager)\n    captured = capsys.readouterr()\n    assert \"Неверный формат ID.\" in captured.out\n    mock_manager.edit_task.assert_not_called()\ndef test_handle_view_tasks_no_tasks(mock_manager, capsys):\n    \"\"\"Тестирует просмотр задач при отсутствии задач.\"\"\"\n    mock_manager.view_tasks.return_value = []",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_view_tasks_no_tasks",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_view_tasks_no_tasks(mock_manager, capsys):\n    \"\"\"Тестирует просмотр задач при отсутствии задач.\"\"\"\n    mock_manager.view_tasks.return_value = []\n    with patch(\"builtins.input\", side_effect=[\"\"]):\n        handle_view_tasks(mock_manager)\n    captured = capsys.readouterr()\n    assert \"Задач не найдено.\" in captured.out\ndef test_handle_search_tasks_no_results(mock_manager, capsys):\n    \"\"\"Тестирует поиск задач без результатов.\"\"\"\n    mock_manager.search_tasks.return_value = []",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_search_tasks_no_results",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_search_tasks_no_results(mock_manager, capsys):\n    \"\"\"Тестирует поиск задач без результатов.\"\"\"\n    mock_manager.search_tasks.return_value = []\n    inputs = [\"ключевое слово\", \"Работа\", \"выполнено\"]\n    with patch(\"builtins.input\", side_effect=inputs):\n        handle_search_tasks(mock_manager)\n    captured = capsys.readouterr()\n    assert \"Задач не найдено.\" in captured.out\ndef test_handle_mark_completed(mock_manager):\n    \"\"\"Тестирует отметку задачи как выполненной.\"\"\"",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_mark_completed",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_mark_completed(mock_manager):\n    \"\"\"Тестирует отметку задачи как выполненной.\"\"\"\n    mock_manager.find_task_by_id.return_value = MagicMock()\n    with patch(\"builtins.input\", side_effect=[\"1\"]):\n        handle_mark_completed(mock_manager)\n    mock_manager.edit_task.assert_called_once_with(1, status=\"выполнено\")\ndef test_handle_mark_completed_task_not_found(mock_manager, capsys):\n    \"\"\"Тестирует отметку задачи как выполненной, если задача не найдена.\"\"\"\n    mock_manager.find_task_by_id.return_value = None\n    with patch(\"builtins.input\", side_effect=[\"1\"]):",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_handle_mark_completed_task_not_found",
        "kind": 2,
        "importPath": "test_Main",
        "description": "test_Main",
        "peekOfCode": "def test_handle_mark_completed_task_not_found(mock_manager, capsys):\n    \"\"\"Тестирует отметку задачи как выполненной, если задача не найдена.\"\"\"\n    mock_manager.find_task_by_id.return_value = None\n    with patch(\"builtins.input\", side_effect=[\"1\"]):\n        handle_mark_completed(mock_manager)\n    captured = capsys.readouterr()\n    assert \"Задача не найдена.\" in captured.out\n    mock_manager.edit_task.assert_not_called()",
        "detail": "test_Main",
        "documentation": {}
    },
    {
        "label": "test_task_creation",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_creation():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"High\")\n    assert task.id == 1\n    assert task.title == \"Test Task\"\n    assert task.description == \"Description\"\n    assert task.category == \"Work\"\n    assert task.due_date.strftime(\"%Y-%m-%d\") == \"2024-12-01\"\n    assert task.priority == \"High\"\n    assert task.status == \"Не выполнена\"\ndef test_task_to_dict():",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_to_dict",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_to_dict():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"High\")\n    task_dict = task.to_dict()\n    assert task_dict == {\n        \"id\": 1,\n        \"title\": \"Test Task\",\n        \"description\": \"Description\",\n        \"category\": \"Work\",\n        \"due_date\": \"2024-12-01\",\n        \"priority\": \"High\",",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_mark_as_completed",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_mark_as_completed():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"High\")\n    task.mark_as_completed()\n    assert task.status == \"Выполнена\"\ndef test_task_str():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"High\")\n    task_str = str(task)\n    expected_str = (\n        \"Task ID: 1\\n\"\n        \"Title: Test Task\\n\"",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_str",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_str():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"High\")\n    task_str = str(task)\n    expected_str = (\n        \"Task ID: 1\\n\"\n        \"Title: Test Task\\n\"\n        \"Description: Description\\n\"\n        \"Category: Work\\n\"\n        \"Due Date: 2024-12-01\\n\"\n        \"Priority: High\\n\"",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_invalid_date_format",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_invalid_date_format():\n    with pytest.raises(ValueError, match=\"Неверный формат даты: invalid-date. Используйте формат YYYY-MM-DD.\"):\n        Task(1, \"Invalid Date Task\", \"Description\", \"Work\", \"invalid-date\", \"High\")\ndef test_task_equality():\n    task1 = Task(1, \"Task 1\", \"Description 1\", \"Work\", \"2024-12-01\", \"High\")\n    task2 = Task(1, \"Task 1\", \"Description 1\", \"Work\", \"2024-12-01\", \"High\")\n    assert task1.to_dict() == task2.to_dict()\ndef test_task_priority():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"Low\")\n    assert task.priority == \"Low\"",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_equality",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_equality():\n    task1 = Task(1, \"Task 1\", \"Description 1\", \"Work\", \"2024-12-01\", \"High\")\n    task2 = Task(1, \"Task 1\", \"Description 1\", \"Work\", \"2024-12-01\", \"High\")\n    assert task1.to_dict() == task2.to_dict()\ndef test_task_priority():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"Low\")\n    assert task.priority == \"Low\"\n    task.priority = \"High\"\n    assert task.priority == \"High\"\ndef test_task_missing_fields():",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_priority",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_priority():\n    task = Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\", \"Low\")\n    assert task.priority == \"Low\"\n    task.priority = \"High\"\n    assert task.priority == \"High\"\ndef test_task_missing_fields():\n    with pytest.raises(TypeError):\n        Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\")  # Отсутствует `priority`",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_missing_fields",
        "kind": 2,
        "importPath": "test_Task",
        "description": "test_Task",
        "peekOfCode": "def test_task_missing_fields():\n    with pytest.raises(TypeError):\n        Task(1, \"Test Task\", \"Description\", \"Work\", \"2024-12-01\")  # Отсутствует `priority`",
        "detail": "test_Task",
        "documentation": {}
    },
    {
        "label": "test_task_manager_init",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_init(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    assert os.path.exists(file_path)\ndef test_task_manager_load_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    assert task_manager.load_tasks() == []\n    with open(file_path, 'w') as file:\n        json.dump([",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_load_tasks",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_load_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    assert task_manager.load_tasks() == []\n    with open(file_path, 'w') as file:\n        json.dump([\n            {'id': 1, 'title': 'Task 1', 'description': 'Description 1', 'category': 'Work', 'due_date': '2024-12-01', 'priority': 'High'},\n            {'id': 2, 'title': 'Task 2', 'description': 'Description 2', 'category': 'Personal', 'due_date': '2024-12-02', 'priority': 'Medium'},\n        ], file)\n    tasks = task_manager.load_tasks()",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_save_tasks",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_save_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    tasks = [\n        Task(1, 'Task 1', 'Description 1', 'Work', '2024-12-01', 'High'),\n        Task(2, 'Task 2', 'Description 2', 'Personal', '2024-12-02', 'Medium'),\n    ]\n    task_manager.save_tasks(tasks)\n    with open(file_path, 'r') as file:\n        saved_tasks = json.load(file)",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_add_task",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_add_task(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    tasks = task_manager.load_tasks()\n    assert len(tasks) == 1\n    assert tasks[0].title == 'Task 3'\ndef test_task_manager_delete_task(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_delete_task",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_delete_task(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    task_manager.delete_task(1)\n    tasks = task_manager.load_tasks()\n    assert len(tasks) == 0\ndef test_task_manager_edit_task(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_edit_task",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_edit_task(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    task_manager.edit_task(1, title='Edited Task 3', category='Personal')\n    tasks = task_manager.load_tasks()\n    assert len(tasks) == 1\n    assert tasks[0].title == 'Edited Task 3'\n    assert tasks[0].category == 'Personal'\ndef test_task_manager_mark_task_as_completed(tmpdir):",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_mark_task_as_completed",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_mark_task_as_completed(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    task_manager.mark_task_as_completed(1)\n    tasks = task_manager.load_tasks()\n    assert len(tasks) == 1\n    assert tasks[0].status == 'Выполнена'\ndef test_task_manager_search_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_search_tasks",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_search_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    task_manager.add_task('Task 4', 'Description 4', 'Personal', '2024-12-04', 'High')\n    tasks = task_manager.search_tasks(keyword='Task 3')\n    assert len(tasks) == 1\n    assert tasks[0].title == 'Task 3'\n    tasks = task_manager.search_tasks(category='Personal')\n    assert len(tasks) == 1",
        "detail": "test_TaskManager",
        "documentation": {}
    },
    {
        "label": "test_task_manager_view_tasks",
        "kind": 2,
        "importPath": "test_TaskManager",
        "description": "test_TaskManager",
        "peekOfCode": "def test_task_manager_view_tasks(tmpdir):\n    file_path = os.path.join(tmpdir, 'tasks.json')\n    task_manager = TaskManager(file_path)\n    task_manager.add_task('Task 3', 'Description 3', 'Work', '2024-12-03', 'Low')\n    task_manager.add_task('Task 4', 'Description 4', 'Personal', '2024-12-04', 'High')\n    tasks = task_manager.view_tasks(category='Work')\n    assert len(tasks) == 1\n    assert tasks[0].category == 'Work'\n    tasks = task_manager.view_tasks()\n    assert len(tasks) == 2",
        "detail": "test_TaskManager",
        "documentation": {}
    }
]